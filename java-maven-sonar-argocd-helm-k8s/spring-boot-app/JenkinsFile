pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "bhavanabc/ultimate-cicd:${BUILD_NUMBER}"
        DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from version control
                git branch: 'main', url: 'https://github.com/Bhavanabcgit/Jenkins-Zero-To-Hero.git'
            }
        }

        stage('Build') {
            steps {
                // Run Maven build and package the application on the remote server
                sshagent(['ssh-credential-id']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ubuntu@3.144.136.91 "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package"
                    '''
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                // Copy the built artifacts from the remote server to the Jenkins server
                sshagent(['ssh-credential-id']) {
                    sh '''
                    scp -o StrictHostKeyChecking=no ubuntu@3.144.136.91:/home/ubuntu/java-maven-sonar-argocd-helm-k8s/spring-boot-app/target/*.jar .
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    // Build and push the Docker image on the Jenkins server
                    sh 'docker build -t ${DOCKER_IMAGE} -f ${DOCKERFILE_LOCATION} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "${REGISTRY_CREDENTIALS}") {
                        dockerImage.push()
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace after build
            cleanWs()
        }
    }
}
