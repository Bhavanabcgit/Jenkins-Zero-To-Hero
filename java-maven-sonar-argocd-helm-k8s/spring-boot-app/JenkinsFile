pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "bhavanabc/ultimate-cicd:${BUILD_NUMBER}"
        DOCKERFILE_LOCATION = "/home/ubuntu/Jenkins-Zero-To-Hero/java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Bhavanabcgit/Jenkins-Zero-To-Hero.git'
            }
        }

        stage('Setup Remote Environment') {
            steps {
                sshagent(['ssh-credential-id']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ubuntu@3.144.136.91 << 'EOF'
                    rm -rf Jenkins-Zero-To-Hero
                    git clone https://github.com/Bhavanabcgit/Jenkins-Zero-To-Hero.git
                    EOF
                    '''
                }
            }
        }

        stage('Build and Package') {
            steps {
                sshagent(['ssh-credential-id']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ubuntu@3.144.136.91 << 'EOF'
                    cd Jenkins-Zero-To-Hero/java-maven-sonar-argocd-helm-k8s/spring-boot-app
                    mvn clean dependency:go-offline package
                    EOF
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                sshagent(['ssh-credential-id']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ubuntu@3.144.136.91 << 'EOF'
                    cd Jenkins-Zero-To-Hero/java-maven-sonar-argocd-helm-k8s/spring-boot-app
                    docker build -t ${DOCKER_IMAGE} -f ${DOCKERFILE_LOCATION} .
                    echo ${DOCKER_CREDENTIALS_PSW} | docker login -u ${DOCKER_CREDENTIALS_USR} --password-stdin
                    docker push ${DOCKER_IMAGE}
                    EOF
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
